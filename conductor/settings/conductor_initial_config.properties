# Enable debug mode
DebugModeEnable=true
EmailSenderUsername=mymail@gmail.com
EmailSenderPassword=password
EmailSender=mymail@gmail.com
EmailRecipient=reciptmail@gmail.com
PostgraSQLServerAddress=127.0.0.1
PostgraSQLServerPort=5432
PostgraSQLUserName=postgres
PostgraSQLPassWord=password
PostgraSQLDataBase=
PostgraSQLTable=
# Creating tables in the postgres memory mode.
CreatTableUploadSessions=CREATE TABLE IF NOT EXISTS user_auth (id SERIAL PRIMARY KEY, token VARCHAR(12), user_id integer, station_id bigint, file_name VARCHAR(255), creation_time timestamp DEFAULT current_timestamp, current_process smallint, progress_report VARCHAR(12), customer_policy smallint, instance_id VARCHAR(12), query_temp_imprint VARCHAR(6))
CreatTableUploadSessions=CREATE UNLOGGED TABLE IF NOT EXISTS upload_sessions (id SERIAL PRIMARY KEY, token VARCHAR(12), user_id integer, station_id bigint, file_name VARCHAR(255), creation_time timestamp DEFAULT current_timestamp, current_process smallint, progress_report VARCHAR(12), customer_policy smallint, instance_id VARCHAR(12), query_temp_imprint VARCHAR(6))
CreatTableInstanceServers=CREATE UNLOGGED TABLE IF NOT EXISTS instance_servers (id SERIAL PRIMARY KEY, instance_id VARCHAR(12), private_ip inet, ready_to_work integer DEFAULT 0, creation_time timestamp DEFAULT current_timestamp)
CtreatTableSecurityToken=CREATE UNLOGGED TABLE IF NOT EXISTS security_token (id SERIAL PRIMARY KEY, token VARCHAR(32), creation_time timestamp DEFAULT current_timestamp
# Tables in postgres
TableUploadSessions=upload_sessions
TableInstanceServers=instance_servers
TableSecurityToken=security_token
# Cloud endpoint
SetEndPointName=ec2.us-east-1.amazonaws.com
StringEndPointRegion=us-east-1
# Main Conductor scheduler loop tick in millisecond
MainConductorSchedulerLoopTick=3000
# Main Healthcheck scheduler loop tick in second
MainHealthCheckSchedulerLoopTick=10
HttpOrHttpsPRotocolModeForHealthCheck=http://
# Tick time for waiting a tier be ready in millisecond 
TickTimeTierBeReady=5000
# Time to wait for instance be operational-> Wait Time in Second = (TimeWaitInstanceBeOprational * TickTimeTierBeReady)/1000
TimeWaitInstanceBeOprational=60
# 2 minutes is the time which one upload will become expired. So, it will suppose as garbage.   
UploadTimeExpiration=2
SupportStandbyServers=0
MaxNumberOfJobsSlotPerServer=4
HashUsersJobName=UsersJobs
# percent number (double) between 0.0% up to 100.0%. It says up to which number after floating point we are authorized to add one tier more to handle all remained jobs. It means we can add one tier to handle a little bit jobs which are not to be contained in the other tiers.
TolerancePercent=10.0%
# Minimum job server fleecast should have in the runtime.
MinimumEssentialTiers=2
# Minimum job servers we can have from amazon or is our finance policy.
MaximumAccessableTiersFromAmazon=19
InstanceAmiSecurityGroup=encoder_security_group
InstanceAmiToRunSecurityKey=your-aws-ami-name
# Amazon AMI which all of job machines should be cloned from it.
InstanceAmiToRun=ami-22cdbxxx
InstanceType=t1.micro
# the threshold for triggering stop conductor engine.
FatalErrorThreshold=3
# URL for sending commands to the job servers
UriRestServer =http://localhost:8080/
AdminUserName=admin-name
AdminPassword=admin-hashed-pass
AdminSessionValidTimeInMinut=2
